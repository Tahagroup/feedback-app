// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  name     String
  verified Boolean
  email    String
  profile  UserProfile?
  issue    Issue[]
  votes    Vote[]
  comments Comment[]
  File     File[]
}

enum UserRole {
  Normal
  Admin
  Manager
}

model UserProfile {
  id Int @id @default(autoincrement())

  password Bytes
  role     UserRole

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

}

enum IssueStatus {
  Pending
  InProgress
  Done
}

enum IssueType {
  Bug
  Suggestion
}

enum VoteType {
  Up
  Down
}

model Vote {
  id Int @id @default(autoincrement())

  type    VoteType
  date    DateTime
  userId  Int
  issueId Int

  user  User  @relation(fields: [userId], references: [id])
  issue Issue @relation(fields: [issueId], references: [id])
}

model Comment {
  id Int @id @default(autoincrement())

  text    String
  date    DateTime
  userId  Int
  issueId Int

  user  User  @relation(fields: [userId], references: [id])
  issue Issue @relation(fields: [issueId], references: [id])

}

model Label {
  id Int @id @default(autoincrement())

  name   String  @unique
  color  Int
  issues Issue[]
}

model Issue {
  id Int @id @default(autoincrement())

  title       String
  description String
  status      IssueStatus
  date        DateTime
  type        IssueType
  votes       Vote[]
  comments    Comment[]
  labels      Label[]
  files       File[]
  published   Boolean
  reviewed    Boolean

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model File {
  id Int @id @default(autoincrement())

  name     String
  size     Int
  mimeType String
  path     String
  issueId  Int?
  userId   Int

  issue Issue? @relation(fields: [issueId], references: [id])
  user  User   @relation(fields: [userId], references: [id])
}

// View
model IssueWithCommentsAndVotesCount {
  id          Int         @unique
  title       String
  description String
  status      IssueStatus
  date        DateTime
  type        IssueType
  published   Boolean
  reviewed    Boolean
  userId      Int

  commentsCount Int
  upVoteCount   Int
  downVoteCount Int
  labels        Int[]
  userIds       Int[]
}
